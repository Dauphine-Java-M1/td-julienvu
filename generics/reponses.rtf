{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Exercice 4 Fusion\
1.\
\
Signature correcte: <T> List<T> Fusion(List<? extends T> L1,List<? extends T> L2)\
Prend en compte n\'92importe quel type de liste\
2.\
Collections.<T>emptyList();//objet immutable ou on ne peut pas ajouter d'objets dedans\
par polymmorphisme\
//n peut sauvegarder les objets des classes filles dans le type T\
\
\
3.\
On cr\'e9e une nouvelle variable int  curseuralternance et on l\'92initialise \'e0 0; \
C\'92est une variable qui va ajouter dans la liste finale fusionn\'e9e\
soit l'un des \'e9lements de la liste L1 ou soit celui de la liste L2\
si L1 et L2 sont de tailles diff\'e9rentes, on retourne une exception\
On ajoute donc les \'e9lements L1 et L2 selon la valeur de cette variable.\
\
\
Exercice 5:\
\
2. Linkedlist a comme complexit\'e9:  po(n^2)}