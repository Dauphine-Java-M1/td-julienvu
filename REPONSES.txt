vu julien
td intro maven+git 
Apache Maven 3.6.0

Exercice 1 td maven



mvn archetype:generate \-D archetypeArtifactId=maven-archetype-quickstart \-D groupId=fr.dauphine.ja.goburdhanalvin.td00  \-D artifactId=td00 \-D interactiveMode=false

6.classes et maven-status 

Classpath est un paramètre passé à une machine virtuelle Java qui définit le chemin d'accès au répertoire où se trouvent les classes et les packages Java afin qu'elle les exécute.


Exercice 2 td maven



1. aucun attribut manifest principal dans target/td00-1.0-SNAPSHOT.jar


2.java compile  puis java-cp 

3.System.out.println();
4. toString
5. public static void main(String[] args) {
6. GetField, SetOfInteger
7. refactor
TD MAVEN - exercice 2
1) cd javaavance/td00/
mvn package
java -cp target/td00-1.0-SNAPSHOT.jar fr.dauphine.ja.jouandekervenoaelmaelis.td00.App

La commande java -jar target/td00-1.0-SNAPSHOT.jar ne permet pas d’exécuter le fichier JAR. Il faut en effet spécifier le nom de la classe qui contient le main (ou bien utiliser un plugin qui écrit le manifest)

3) ajout du code pour le plugin générant le fichier Manifest  dans POM.xml
mvn package
java -jar target/td00-1.0-SNAPSHOT.jar

4) Ca fonctionne !

Différence maven compile et maven package :
maven compile = compile les fichiers sources en bytecode dans le dossier target
java = execution du bytecode
maven package = fais une archive zip où il zip tous les fichiers du répertoire target


TD MAVEN - exercice 3
ATTENTION : toujours vérifier que le fichier POM.xml est à jour.
3) saisie automatique : sysout + CTRL + SPACE = System.out.println();

4) toStr + CTRL + SPACE = menu de saisie automatique s’ouvre et propose l’écriture d’une méthode toStr() de type void ou bien de réécrire la méthode toString() de la classe Object.

5) main + CTRL + SPACE = menu de saisie automatique s’ouvre et propose de générer le main de la classe ou bien d’importer une classe comme MarginBorder.

6) int toto;
get + CTRL + SPACE = menu de saisie automatique s’ouvre et propose de générer le getter de la variable toto et d’autres choses. De même pour set avec le setter de la variable toto.

7) Sur MAC : CMD + SHIFT + R = recherche le champ sélectionné dans le dossier où sont situés les fichiers sources (i.e. /src/test/java/fr/dauphine/ja/jouandekervenoaelmaelis/td00)

8) 


TD MAVEN - exercice 4
1) Dans le menu de gauche, clic droit sur nom de la classe. —> Refactor —> Rename

6) Modification dans POM.xml du nom de la classe dans le plugin


TD GIT - exercice 1
1) git init —> création d’un dépôt vide

2) Les fichiers qui doivent faire partie des sources du projet td00 sont les fichiers sources .java, les fichiers de tests unitaires et le pom.xml.
Les fichiers .class ou les archives générées ne sont pas des fichiers à ajouter car ils peuvent être reconstruits à partir des fichiers sources.

3) git add pour ajouter un fichier auquel on a apporté une modification —> git commit

5) git diff affiche les modifications par fichiers entre la précédente version enregistrée git et la version actuelle

10) git diff HEAD HEAD^

TD GIT - exercice 2
5) Le git push provoque une erreur.

6) Le fichier REPONSES.txt contient à la fois la modification ajoutée au début du fichier et la modification ajoutée à la fin du fichier.

7) Si les modifications étaient sur la même ligne, le git pull n’aurait pas pu effectuer la fusion entre le fichier REPONSES.txt sur github et le fichier en local.

TD GIT - exercice 3
2) Le test fonctionne lorsqu’on a assertTrue(true) et une erreur est signalée lorsqu’on a assertTrue(false). La méthode assertTrue() vérifie si la condition en paramètre est vraie ou fausse et  provoque une erreur si elle est fausse.

